library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity relu_4bit is

	port(
		d_in 	: in 	std_logic_vector(16 downto 0);
		d_out 	: out 	std_logic_vector(2 downto 0)
	);

end relu_4bit;

architecture structure of relu_4bit is

constant	first_bound			:	signed(16	downto	0)	:=	"00000000000100000"; -- 0.125/2
constant	second_bound		:	signed(16	downto	0)	:=	"00000000001000000"; -- 0.25/2
constant	third_bound			:	signed(16	downto	0)	:=	"00000000001100000"; -- 0.375/2
constant	fourth_bound		:	signed(16	downto	0)	:=	"00000000010000000"; -- 0.5/2
constant	fifth_bound			:	signed(16	downto	0)	:=	"00000000010100000"; -- 0.625/2
constant	sixth_bound			:	signed(16	downto	0)	:=	"00000000011000000"; -- 0.75/2
constant	seventh_bound		:	signed(16	downto	0)	:=	"00000000011100000"; -- 0.875/2


begin

	quantization : process(signed(d_in))
	begin
		if	(signed(d_in) <= first_bound) then
			d_out <= "000";
		elsif (signed(d_in) <= second_bound) and (signed(d_in) > first_bound) then
			d_out <= "001";	
		elsif (signed(d_in) <= third_bound) and (signed(d_in) > second_bound) then
			d_out <= "010";
		elsif (signed(d_in) <= fourth_bound) and (signed(d_in) > third_bound) then
			d_out <= "011";
		elsif (signed(d_in) <= fifth_bound) and (signed(d_in) > fourth_bound) then
			d_out <= "100";
		elsif (signed(d_in) <= sixth_bound) and (signed(d_in) > fifth_bound) then
			d_out <= "101";	
		elsif (signed(d_in) <= seventh_bound) and (signed(d_in) > sixth_bound) then
			d_out <= "110";
		elsif (signed(d_in) > seventh_bound) then
			d_out <= "111";
		end if;
	end process;

end structure;