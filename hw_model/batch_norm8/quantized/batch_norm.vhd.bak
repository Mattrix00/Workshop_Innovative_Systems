library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity batch_norm is

	port(
		clk		:	in	std_logic;
		en_h	:	in	std_logic;
		rst_l	:	in	std_logic;
		act		:	in 	std_logic_vector(7 	downto 0);
		a		:	in	std_logic_vector(7 	downto 0);
		b 		:	in 	std_logic_vector(7 	downto 0);
		res		: 	out std_logic_vector(16 downto 0)
		);
		
end entity;

architecture structure of batch_norm is

	component generic_register is
		generic(n : integer := 8);
		port(
			clk		: in 	std_logic;
			en_h	: in 	std_logic;
			rst_l 	: in 	std_logic;
			d_in 	: in 	std_logic_vector((n-1) downto 0);
			d_out 	: out 	std_logic_vector((n-1) downto 0)
			);
	end component;
	
	component dadda is
		port(
			a	:	in 	std_logic_vector(7 	downto 0);
			b 	:	in 	std_logic_vector(7 	downto 0);
			res	: 	out std_logic_vector(15 downto 0)
			);
	end component;
	
	component adder is 
		port(
			a	:	in 	std_logic_vector(16 downto 0);
			b 	:	in 	std_logic_vector(16 downto 0);
			res	: 	out std_logic_vector(16 downto 0)
			);
	end component;
		
	signal 	act_reg_out		:	std_logic_vector(7 	downto 0);
	signal 	a_reg_out		:	std_logic_vector(7 	downto 0);
	signal 	b_reg_out		:	std_logic_vector(7 	downto 0);
	
	signal	mult_out		:	std_logic_vector(15 downto 0);
	signal	mult_reg_out	:	std_logic_vector(15 downto 0);
	
	signal	a_ext			:	std_logic_vector(16 downto 0);
	signal	b_ext			:	std_logic_vector(16 downto 0);
	signal	adder_out		:	std_logic_vector(16 downto 0);
	signal	adder_reg_out	:	std_logic_vector(16 downto 0);
		
begin

	a_ext				<=	mult_reg_out(15)&mult_reg_out;
	b_ext(16 downto 10)	<=	(16 downto 9 => b_reg_out(7));
	b_ext(9  downto 2)	<=  b_reg_out;
	b_ext(1  downto 0)	<=  (1  downto 0 => b_reg_out(0));
	
	
	reg_act		:	generic_register
		generic map(
			n		=>	8
		)
		port map(
			clk		=>	clk,
			en_h	=>	en_h,
			rst_l 	=>	rst_l,
			d_in 	=>	act,
			d_out 	=>	act_reg_out
		);
		
	reg_a		:	generic_register
		generic map(
			n		=>	8
		)
		port map(
			clk		=>	clk,
			en_h	=>	en_h,
			rst_l 	=>	rst_l,
			d_in 	=>	a,
			d_out 	=>	a_reg_out
		);
		
	reg_b		:	generic_register
		generic map(
			n		=>	8
		)
		port map(
			clk		=>	clk,
			en_h	=>	en_h,
			rst_l 	=>	rst_l,
			d_in 	=>	b,
			d_out 	=>	b_reg_out
		);	
		
	mult		:	dadda
		port map(
			a		=>	a_reg_out,
			b 		=>	b_reg_out,
			res		=>	mult_out
		);
		
	reg_mult	:	generic_register
		generic map(
			n		=>	16
		)
		port map(
			clk		=>	clk,
			en_h	=>	en_h,
			rst_l 	=>	rst_l,
			d_in 	=>	mult_out,
			d_out 	=>	mult_reg_out
		);
	
	sum			:	adder
		port map(
			a		=>	a_ext,
			b 		=>	b_ext,
			res		=>	adder_reg_out
		);
		
	reg_out		:	generic_register
		generic map(
			n		=>	17
		)
		port map(
			clk		=>	clk,
			en_h	=>	en_h,
			rst_l 	=>	rst_l,
			d_in 	=>	adder_reg_out,
			d_out 	=>	res
		);
	
end structure;