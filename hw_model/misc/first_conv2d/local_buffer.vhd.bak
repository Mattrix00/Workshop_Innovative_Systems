library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.fixed_pkg.all;
use work.param.all; 


entity local_buffer is
generic ( qi : natural := 8 ; qf : natural := 8 ) ; 
port ( 
		ck			: in std_logic; 
		rstn 		: in std_logic; 
		cs 		: in std_logic;
		rd_wr_n	: in std_logic;  
      address	: in unsigned(9 downto 0);
		data_in 	: in 	imap;
		data_out : out imap);
end entity; 

architecture structure of local_buffer is

type word is array (0 to 32) of imap_h; 
signal data : word; 

begin

-- synchronous write op

wr_proc: process(ck)
begin
if rising_edge(ck) then
if ( cs = '1' and rd_wr_n = '1') then 

  data(to_integer(address)) <= data_in; 
end if; 
end if; 
end process wr_proc; 

-- asynchronous read op
rd_proc: process(cs, wr_n, rd, address, data_in, mem) 
begin
if ( cs = '1' and rd_wr_n = '0') then

data_out <= data(to_integer(address)); 

else 

data_out <= (others => '0');
end if;
end process rd_proc; 

end architecture; 